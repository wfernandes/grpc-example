// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package definitions is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	CountRequest
	CountResponse
*/
package definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CountRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CountRequest) Reset()                    { *m = CountRequest{} }
func (m *CountRequest) String() string            { return proto.CompactTextString(m) }
func (*CountRequest) ProtoMessage()               {}
func (*CountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CountResponse struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CountResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*CountRequest)(nil), "definitions.CountRequest")
	proto.RegisterType((*CountResponse)(nil), "definitions.CountResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Counter service

type CounterClient interface {
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (Counter_CountClient, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (Counter_CountClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Counter_serviceDesc.Streams[0], c.cc, "/definitions.Counter/Count", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterCountClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Counter_CountClient interface {
	Recv() (*CountResponse, error)
	grpc.ClientStream
}

type counterCountClient struct {
	grpc.ClientStream
}

func (x *counterCountClient) Recv() (*CountResponse, error) {
	m := new(CountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Counter service

type CounterServer interface {
	Count(*CountRequest, Counter_CountServer) error
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_Count_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CounterServer).Count(m, &counterCountServer{stream})
}

type Counter_CountServer interface {
	Send(*CountResponse) error
	grpc.ServerStream
}

type counterCountServer struct {
	grpc.ServerStream
}

func (x *counterCountServer) Send(m *CountResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "definitions.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Count",
			Handler:       _Counter_Count_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0x49, 0x4d, 0xcb, 0xcc, 0xcb,
	0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x56, 0x52, 0xe2, 0xe2, 0x71, 0xce, 0x2f, 0xcd, 0x2b, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x2c, 0xb9, 0x78, 0xa1, 0x6a, 0x8a, 0x0b, 0xf2, 0xf3,
	0x8a, 0x53, 0xb1, 0x29, 0x12, 0x12, 0xe1, 0x62, 0x4d, 0x06, 0x29, 0x92, 0x60, 0x52, 0x60, 0xd4,
	0x60, 0x0d, 0x82, 0x70, 0x8c, 0x7c, 0xb9, 0xd8, 0xc1, 0x5a, 0x53, 0x8b, 0x84, 0x9c, 0xb8, 0x58,
	0xc1, 0x4c, 0x21, 0x49, 0x3d, 0x24, 0x07, 0xe8, 0x21, 0xdb, 0x2e, 0x25, 0x85, 0x4d, 0x0a, 0x62,
	0xa9, 0x12, 0x83, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x07, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf9, 0x07, 0x08, 0xb3, 0xd1, 0x00, 0x00, 0x00,
}
